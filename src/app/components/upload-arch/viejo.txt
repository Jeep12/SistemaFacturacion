
   images: string[];
  imageSelect!: any;




 uploadImage($event: any) {
    const file = $event.target.files[0];
    const option = this.cardSelect;

    const imgRef = ref(this.storage.storage, `images/cards/${option}/${file.name}`);
    uploadBytes(imgRef, file).then(response => {
      console.log(response);

    }).catch(error => {
      console.log(error);
    });
  }

  opcionSeleccionada() {
    console.log('OpciÃ³n seleccionada:', this.cardSelect);
    const option = this.cardSelect;
    console.log(`images/cards/${option}`);
    const imagesRef = ref(this.storage.storage, `images/cards/${option}`);
    const list = listAll(imagesRef).then(async response => {
      console.log(response);
      this.images = [];
      this.imageSelect = response;
      for (let item of response.items) {
        const url = await getDownloadURL(item);
        console.log(url);
        this.images.push(url);
      }

    }).catch(error => {
      console.log(error)
    });
  }
  datos(index: number) {
    console.log(this.imageSelect.items[index].name);
    console.log(index);
    this.deleteImage(this.imageSelect.items[index].name);


  }
  getImages() {
    const imagesRef = ref(this.storage.storage, 'images/cards/viesa');
    const list = listAll(imagesRef).then(async response => {
      console.log(response);
      this.images = [];
      this.imageSelect = response;
      for (let item of response.items) {
        const url = await getDownloadURL(item);
        console.log(url);
        this.images.push(url);
      }

    }).catch(error => {
      console.log(error)
    });
  }
  deleteImage(name: string) {
    const option = this.cardSelect;
    const imageRef = this.storage.ref(`images/cards/${option}/${name}`);
    imageRef.delete().subscribe(() => {
      console.log('Imagen borrada correctamente');
      this.getImages();
    }, (error) => {
      console.log('Error al borrar la imagen:', error);
    });
  }
